Encapsulation: hide data implementation, increase flexibility

Constrictor:
1. Constructor is a special method which shares the same name of the class and does not have any return type not even void.
2. It is used to create an object of the class and intialize the class members.
3. If there is no constructor int the class, c# compiler will provide a default constructor and is parameterless. 
4. Constructor can be overloaded. 
5. Constructor can not be inherited. So, a constructor can not be overriden. 
6. By default, derived class constructor will make a call to base class parameterless constructor. 

Inheritance : allows one class to inherit from another existing class so that the derived class can reuse, extend and modify the code we have in the base class

Employee Management System 
Full time employees: biweekly pay, benefits
Part time employees: hourly pay

In common: id, name, email, phone, addess; perform work

Abstract class: is the class that can not create any object from it, can contain both abstract and concrete methods

Abstract method: can only be used in an abstract class, it doesn't have a body, the body is provided by the derived class

A sealed class means it can not have any child classes. 

Polymorphism:

Method Overriding: happens between the base class and derived class, we have the same method signature including access modifier, method name,
input/output parameters; derived classes can give different implementations for the same method

Method Overloading: multiple methods in the same class, same access modifiers, same method name but different input/output parameters

//get Method to display the form
CreateUser()

//Post method to create user
CreateUser([FormBody] form)

static: members should belong to the class itself instead of nay instance
Static class: all the members should be static

Sealed class vs Static class:

1. Both class cannot be inherited
2. Sealed class can have instances but static class can not
3. Sealed class can contain either static or non-static methods but static class can only contain static method

Abstract class vs Static class:

1. Both cannot be instantiated.
2. Abstract class should be inherited but static class can not be inherited. 
3. Abstract class can contain either static or non static method but for static class, it can only contain static method

Use case for static class:
1. Provide utilities: Console class, Math
2. Create extensions
3. Database Configuration class: db name, server name, port number, database connection strings
4. Design pattern: Singleton

Extension Method: allows us to add additional functionalities to the existing type without modifying, deriving or recompiling the original class

Syntax of creating custom extension methods:

1. The class that contains extension method must be static class.
2. Method itself must be static method.
3. First parameter of the extension method must be the type which will be extended.
4. First parameter must be written after 'this' keyword

SOLID

O: open/closed principle -- objects/entities should be open for extension but closed for modification

Built-in Extension methods: LINQ

Casing Technique:

1. Pascal Casing -- first letter of an identifier must be written in uppercase and remaining letters must be in lower case---
Class, Method, NameSpace, Property, Interface, Delegates
2. Camel Casing--for the first word, all the letters are in lower case but for rest of the words, they follow pascal casing --
variable, object






